"""Database models."""

from datetime import datetime
from enum import Enum

from sqlmodel import Field, SQLModel


class User(SQLModel, table=True):
    """Model for a user in the system."""

    id: str = Field(primary_key=True, description="Unique identifier for the user.")
    email: str = Field(index=True, description="Email address of the user.")
    created_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="Timestamp when the user was created.",
    )


class Message(SQLModel, table=True):
    """Model for Fastfill chat messages."""

    id: int | None = Field(default=None, primary_key=True)
    content: str = Field(description="Content of the chat message.")
    thread_id: str = Field(
        index=True, description="ID of the thread this message belongs to."
    )
    timestamp: datetime = Field(
        default_factory=datetime.utcnow,
        description="Timestamp when the message was created.",
    )
    user_id: str = Field(
        index=True,
        description="ID of the user who sent the message.",
        foreign_key="user.id",
    )


class Annotation(SQLModel, table=True):
    """Model for templates generated by the FastForm application."""

    id: int | None = Field(default=None, primary_key=True)
    name: str = Field(description="Name of the template.")
    description: str | None = Field(
        default=None, description="Description of the template."
    )
    structure: str = Field(
        description="JSON structure of the template, defining its fields and layout."
    )
    created_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="Timestamp when the template was created.",
    )
    user_id: str = Field(
        index=True,
        description="ID of the user who created the template.",
        foreign_key="user.id",
    )
